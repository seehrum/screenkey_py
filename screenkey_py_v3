import pygame
from pygame.locals import *
import threading
import time

# Configuração do tamanho da tela
screen_width, screen_height = 300, 100

# Inicialização do Pygame
pygame.init()
font = pygame.font.Font(None, 33)  # Tamanho da fonte principal
button_font = pygame.font.Font(None, 24)  # Tamanho da fonte do botão

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Screenkey")

# Desenho do botão de fechar
button_color = (200, 0, 0)  # Vermelho
button_width, button_height = 80, 30  # Tamanho do botão
button_x, button_y = screen_width - button_width - 10, 10  # Posição do botão
button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
button_text = button_font.render('Fechar', True, (255, 255, 255))

# Função para desenhar o botão de fechar
def draw_close_button():
    pygame.draw.rect(screen, button_color, button_rect)
    text_rect = button_text.get_rect(center=(button_x + button_width / 2, button_y + button_height / 2))
    screen.blit(button_text, text_rect)

# Variáveis de controle
current_text = []
clear_delay = 3  # Tempo para limpar a tela
running = True  # Controla o loop principal
timer = None  # Timer para limpar a tela
modifiers = set()  # Conjunto para armazenar teclas de modificação pressionadas

# Função para limpar a tela após um tempo
def clear_screen():
    global current_text, timer
    current_text = []
    update_screen()
    timer = threading.Timer(clear_delay, clear_screen)
    timer.start()

# Atualiza a tela
def update_screen():
    if running:
        screen.fill((0, 0, 0))
        draw_close_button()
        for i, line in enumerate(current_text):
            text = font.render(line, True, (255, 255, 255))
            screen.blit(text, (10, 10 + i * font.get_height()))
        pygame.display.flip()

# Adiciona texto à tela
def add_text(text):
    global current_text
    current_text.append(text.upper())
    if len(current_text) * font.get_height() > screen_height:
        current_text.pop(0)
    update_screen()

# Função para formatar a saída das teclas pressionadas
def format_key_output(key_name, key_event):
    if key_event in modifiers and len(modifiers) == 1:
        add_text(pygame.key.name(key_event).upper())
    else:
        modifier_names = [pygame.key.name(mod_key).replace("left ", "").replace("right ", "").upper() for mod_key in modifiers if mod_key != key_event]
        combined_keys = ' + '.join(modifier_names + [key_name.upper()])
        add_text(combined_keys)

# Mapeamento de botões do mouse
mouse_buttons = {
    1: 'Left Click',
    2: 'Middle Click',
    3: 'Right Click',
    4: 'Scroll Up',
    5: 'Scroll Down'
}

# Encerrar as threads e o Pygame de maneira limpa
def shutdown():
    global running, timer
    running = False
    if timer:
        timer.cancel()
    pygame.quit()

# Inicializa a limpeza da tela
clear_screen()

# Loop principal
try:
    while running:
        for event in pygame.event.get():
            if event.type == QUIT:
                shutdown()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if button_rect.collidepoint(event.pos) and event.button == 1:
                    shutdown()
                else:
                    mouse_event = mouse_buttons.get(event.button)
                    if mouse_event:
                        add_text(mouse_event)
            elif event.type == pygame.KEYDOWN:
                if event.key in [K_LSHIFT, K_RSHIFT, K_LCTRL, K_RCTRL, K_LALT, K_RALT, K_MODE]:
                    modifiers.add(event.key)
                    format_key_output(pygame.key.name(event.key), event.key)
                else:
                    format_key_output(pygame.key.name(event.key), event.key)
            elif event.type == pygame.KEYUP:
                if event.key in [K_LSHIFT, K_RSHIFT, K_LCTRL, K_RCTRL, K_LALT, K_RALT, K_MODE]:
                    modifiers.discard(event.key)
except Exception as e:
    print(f"Erro ocorrido: {e}")
    shutdown()
