import tkinter as tk
from tkinter import ttk, messagebox
from pynput import mouse, keyboard
import logging

# Configuration Variables
LOG_KEYBOARD = False  # Set to True to enable keyboard logging
LOG_MOUSE = False     # Set to True to enable mouse logging
ALWAYS_ON_TOP = False # Set to True to keep the window always on top
FONT_SIZE = 15        # Font size for text display
SCREEN_WIDTH = 300    # Width of the application window
SCREEN_HEIGHT = 100   # Height of the application window

class ScreenkeyApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Screenkey v3.2A")
        self.setup_ui()
        self.setup_listeners()
        self.action_history = []  # Combined history for keys and mouse actions

        self.log_keyboard = LOG_KEYBOARD
        self.log_mouse = LOG_MOUSE
        self.always_on_top = ALWAYS_ON_TOP

        self.setup_logger()

    def setup_logger(self):
        # Setting up the logger for the application
        try:
            self.logger = logging.getLogger("screenkey")
            self.logger.setLevel(logging.INFO)
            file_handler = logging.FileHandler("screenkey_log.txt", mode="w")
            file_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))
            self.logger.addHandler(file_handler)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to setup logger: {e}")

    def setup_ui(self):
        # UI setup for the Screenkey application
        self.root.geometry(f"{SCREEN_WIDTH}x{SCREEN_HEIGHT}")  # Set window size
        style = ttk.Style()
        style.configure("TButton", font=("Helvetica", FONT_SIZE))

        self.action_text = tk.Text(self.root, height=5, width=40, state="disabled", font=("Helvetica", FONT_SIZE))
        self.action_text.pack(pady=10)

        self.clear_history_button = ttk.Button(self.root, text="Clear History", command=self.clear_history)
        self.clear_history_button.pack(pady=10)

        self.setup_menu()

    def setup_menu(self):
        # Setting up the menu for the application
        self.menu = tk.Menu(self.root)
        self.root.config(menu=self.menu)

        self.settings_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="Settings", menu=self.settings_menu)
        self.settings_menu.add_checkbutton(label="Log Keyboard Actions", command=self.toggle_keyboard_logging)
        self.settings_menu.add_checkbutton(label="Log Mouse Actions", command=self.toggle_mouse_logging)
        self.settings_menu.add_checkbutton(label="Always on Top", command=self.toggle_always_on_top)
        self.settings_menu.add_separator()
        self.settings_menu.add_command(label="Exit", command=self.exit_app)  # Exit option

    def setup_listeners(self):
        # Setting up global listeners for mouse and keyboard
        try:
            self.mouse_listener = mouse.Listener(on_click=self.on_click, on_scroll=self.on_scroll)
            self.mouse_listener.start()

            self.keyboard_listener = keyboard.Listener(on_press=self.on_press)
            self.keyboard_listener.start()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to setup listeners: {e}")

    def on_press(self, key):
        # Handling global key press event
        try:
            key_text = f"Key pressed: {key.char if hasattr(key, 'char') else key}"
        except AttributeError:
            key_text = f"Special key pressed: {key}"
        self.action_history.append(key_text)
        self.update_action_text()
        if self.log_keyboard:
            self.logger.info(key_text)

    def toggle_keyboard_logging(self):
        # Toggling the logging state for keyboard actions
        self.log_keyboard = not self.log_keyboard

    def toggle_mouse_logging(self):
        # Toggling the logging state for mouse actions
        self.log_mouse = not self.log_mouse

    def toggle_always_on_top(self):
        # Toggling the always on top state for the application window
        self.always_on_top = not self.always_on_top
        self.root.attributes("-topmost", self.always_on_top)

    def on_click(self, x, y, button, pressed):
        # Handling the mouse click event
        if pressed:
            button_name = self.get_mouse_button_name(button)
            action_text = f"Mouse button {button_name} pressed"
            self.action_history.append(action_text)
            self.update_action_text()
            if self.log_mouse:
                self.logger.info(action_text)

    def on_scroll(self, x, y, dx, dy):
        # Handling mouse scroll event
        scroll_text = f"Mouse scrolled: {'up' if dy > 0 else 'down'}"
        self.action_history.append(scroll_text)
        self.update_action_text()
        if self.log_mouse:
            self.logger.info(scroll_text)

    def get_mouse_button_name(self, button):
        # Getting the name of the mouse button
        return {mouse.Button.left: "left", mouse.Button.right: "right", mouse.Button.middle: "middle"}.get(button, str(button))

    def update_action_text(self):
        # Updating the text area for actions
        self.action_text.config(state="normal")
        self.action_text.delete(1.0, "end")
        for action in self.action_history:
            self.action_text.insert("end", action + "\n")
        self.action_text.see("end")
        self.action_text.config(state="disabled")

    def clear_history(self):
        # Clearing the history of actions
        self.action_history.clear()
        self.update_action_text()

    def exit_app(self):
        # Function to exit the application
        self.root.destroy()

    def run(self):
        # Running the main loop of the application
        self.root.mainloop()

if __name__ == "__main__":
    app = ScreenkeyApp()
    app.run()
